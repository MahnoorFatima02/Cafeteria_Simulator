package simu.framework;

import eduni.distributions.ContinuousGenerator;
import eduni.distributions.Negexp;

/**
 * The {@code ArrivalProcess} class is responsible for generating arrival events in the simulation.
 * It uses a continuous generator to determine the time between arrivals and adds events to the event list.
 */
public class ArrivalProcess {
	private ContinuousGenerator generator;
	private EventList eventList;
	private IEventType type;

	/**
	 * Constructs an {@code ArrivalProcess} with the specified generator, event list, and event type.
	 *
	 * @param g     the continuous generator used to determine the time between arrivals
	 * @param tl    the event list to which arrival events are added
	 * @param type  the type of events generated by this arrival process
	 */
	public ArrivalProcess(ContinuousGenerator g, EventList tl, IEventType type) {
		this.generator = g;
		this.eventList = tl;
		this.type = type;
	}

	/**
	 * Generates the next arrival event and adds it to the event list.
	 * The event time is determined by sampling the continuous generator.
	 */
	public void generateNextEvent() {
		System.out.println("In arrival process .. generating events");
		Event t = new Event(type, Clock.getInstance().getClock() + generator.sample());
		System.out.println("Event Type " + t.getType());
		eventList.add(t);
	}

	/**
	 * Sets the continuous generator for this arrival process.
	 *
	 * @param generator the new continuous generator
	 */
	public void setGenerator(Negexp generator) {
		this.generator = generator;
	}
}

